version: '3.8'

services:
  # Frontend - React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/letsencrypt
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - techstore-network
    restart: unless-stopped

  # Backend - API Server (ejemplo)
  backend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://user:password@db:5432/techstore
      - JWT_SECRET=your-super-secret-jwt-key
      - REDIS_URL=redis://redis:6379
    command: npm start
    networks:
      - techstore-network
    restart: unless-stopped
    depends_on:
      - db
      - redis

  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=techstore
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - techstore-network
    restart: unless-stopped

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - techstore-network
    restart: unless-stopped

  # Nginx para proxy reverso y SSL
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/letsencrypt
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - techstore-network
    restart: unless-stopped

  # Certbot para SSL automático
  certbot:
    image: certbot/certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./logs/certbot:/var/log/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/html --email admin@techstorecuba.com --agree-tos --no-eff-email -d techstorecuba.com -d www.techstorecuba.com
    depends_on:
      - nginx-proxy
    networks:
      - techstore-network

  # Monitor de logs
  logspout:
    image: gliderlabs/logspout:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ROUTE_URIS=logstash://logstash:5000
    networks:
      - techstore-network
    restart: unless-stopped

  # Logstash para procesamiento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - techstore-network
    restart: unless-stopped

  # Elasticsearch para búsqueda
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - techstore-network
    restart: unless-stopped

  # Kibana para visualización
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - techstore-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  techstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16